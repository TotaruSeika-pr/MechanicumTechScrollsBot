from py.Bot.KeyboardManager import KeyBoardManager as KBM
from py.Bot.UsersRightsManager import UsersRightsManager as URM

from datetime import datetime
import os
import ast

class Actions:

    class BasicActions:

        def FoundItem(items, value):
            return value in items
        
        def ParseItems(items, value):
            answer = []
            for i in items:
                if Actions.BasicActions.FoundItem(items, value):
                    continue
                else:
                    answer.append(i)
            return answer
        
        def ParseCallItems(data):
            answer = ''
            for i in data.split()[1:]:
                answer += i + ' '
            return answer
        
        def SendingSettings(chat_id, bot, dbm, data_mechanicum):
            text = {
                1: '–≤–∫–ª—é—á–µ–Ω–æ',
                0: '–≤—ã–∫–ª—é—á–µ–Ω–æ',
                None: '–≤—ã–∫–ª—é—á–µ–Ω–æ'}
            keyboard = KBM.GetSendingSettingsKeyboard()
            bot.send_message(chat_id, f'–í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏: {text[data_mechanicum[7]]}\n–†–∞—Å—Å—ã–ª–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏: {text[data_mechanicum[8]]}', reply_markup=keyboard())
        
        def PrsonalSendingEdit(chat_id, bot, dbm):
            edit_values = {
                1: [0, '–≤—ã–∫–ª—é—á–µ–Ω–∞'],
                0: [1, '–≤–∫–ª—é—á–µ–Ω–∞'],
                None: [1, '–≤–∫–ª—é—á–µ–Ω–∞']}
            data_mechanicum = dbm.GetMechanicum(chat_id)
            dbm.EditSendingSettings('sending_personal', edit_values[data_mechanicum[7]][0], chat_id)
            bot.send_message(chat_id, f'–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –±—ã–ª–∞ {edit_values[data_mechanicum[7]][1]}')

        def AdminSendingEdit(chat_id, bot, dbm):
            edit_values = {
                1: [0, '–≤—ã–∫–ª—é—á–µ–Ω–∞'],
                0: [1, '–≤–∫–ª—é—á–µ–Ω–∞'],
                None: [1, '–≤–∫–ª—é—á–µ–Ω–∞']}
            data_mechanicum = dbm.GetMechanicum(chat_id)
            dbm.EditSendingSettings('sending_admin', edit_values[data_mechanicum[8]][0], chat_id)
            bot.send_message(chat_id, f'–†–∞—Å—Å—ã–ª–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±—ã–ª–∞ {edit_values[data_mechanicum[8]][1]}')
        
        def OpenMarket(message, bot, dbm):
            
            keyboard = KBM.CreateMarketCategory('market')
            bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–∫—É:', reply_markup=keyboard())

        def OpenItemsMarket(chat_id, bot, dbm, text):
            
            values = dbm.GetAllItems(text)
            if len(values) != 0 and values:
                keyboard = KBM.GetItemsKeyboard(values, text)
                if text == 'prefix':
                    bot.send_message(chat_id, '–°–º–æ—Ç—Ä–∏—Ç–µ –∫–∞–∫–∏–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã!', reply_markup=keyboard())
                elif text == 'cap':
                    bot.send_message(chat_id, '–°–º–æ—Ç—Ä–∏—Ç–µ –∫–∞–∫–∏–µ —à–∞–ø–∫–∏!', reply_markup=keyboard())
            else:
                bot.send_message(chat_id, '–¢—É—Ç –Ω–∏—á–µ–≥–æ –Ω–µ—Ç—É :(')

        def BuyItem(chat_id, bot, dbm, call, text):
            data_mechanicum = dbm.GetMechanicum(chat_id)
            value = dbm.GetItem(text, call)
            if data_mechanicum[12] == None or data_mechanicum[13] == None:
                items_mechanicum = []
            else:
                if text == 'prefix':
                    items_mechanicum = ast.literal_eval(data_mechanicum[12])
                else:
                    items_mechanicum = ast.literal_eval(data_mechanicum[13])
            if not Actions.BasicActions.FoundItem(items_mechanicum, value[1]):
                if data_mechanicum[9] >= int(value[2]):
                    dbm.RemovingPoints(chat_id, value[2])
                    items_mechanicum.append(value[1])
                    dbm.SetMechanicumInventory(text, chat_id, items_mechanicum)
                    bot.send_message(chat_id, f'–ü—Ä–µ–¥–º–µ—Ç {value[1]} –±—ã–ª –∫—É–ø–ª–µ–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å')
                else:
                    bot.send_message(chat_id, f'–ù–µ —Ö–≤–∞—Ç–∞—Ç–µ—Ç –æ—á–∫–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏!')    
            else:
                bot.send_message(chat_id, f'–≠—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç —É –≤–∞—Å —É–∂–µ –µ —Å—Ç—å!')

        def OpenStorage(chat_id, bot, dbm):
            keyboard = KBM.CreateMarketCategory('storage')
            bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–∫—É —Å–∫–ª–∞–¥–∞:', reply_markup=keyboard())

        def OpenItemStorage(chat_id, bot, dbm, call, text):
            user_items = dbm.GetItemsUser(text, chat_id)
            if user_items != None and len(user_items) != 0:
                user_items = ast.literal_eval(user_items)
                user_items = Actions.BasicActions.ParseItems(user_items, dbm.GetUseUserItem(text, call.from_user.id))
                keyboard = KBM.GetItemsKeyboardFromStotage(user_items, text)
                bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:', reply_markup=keyboard())
            else:
                bot.send_message(chat_id, '–£ –≤–∞—Å –Ω–µ—Ç—É –ø—Ä–µ–¥–º–µ—Ç–æ–≤!')

        def SetItem(chat_id, bot, dbm, call, text):
            item = Actions.BasicActions.ParseCallItems(call.data)
            dbm.SetItemUser(text, call.from_user.id, item)
            bot.send_message(chat_id, f'–ü—Ä–µ–¥–º–µ—Ç {item} –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!')

        def SetComment(chat_id, bot, dbm, call):

            def GetDataForSetComment(msg, bot, dbm, call, data_mechanicum):
                data = (call, msg.from_user.id, data_mechanicum[2], msg.text)
                if data[2] != None:
                    dbm.SetComment(data)
                    bot.send_message(msg.chat.id, '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω!')
                    dbm.AddActivityPointsUser(msg.from_user.id, 1)
                else:
                    bot.send_message(msg.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–º–µ–Ω—Ç–∞—Ä–∏—è!')

            data_mechanicum = dbm.GetMechanicum(chat_id)

            if URM.CheckingMechanicum(data_mechanicum) and URM.CheckingReaderCapabilities(data_mechanicum):
                msg = bot.send_message(chat_id, '–ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –≤ –≤–∏–¥–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:')
                bot.register_next_step_handler(msg, GetDataForSetComment, bot, dbm, call, data_mechanicum)
            else:
                bot.UserNotHaveRightsMessage(chat_id)

        def RequestInstructions(chat_id, bot, dbm): # –∑–∞–ø—Ä–æ—Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
            
            def FindInstructions(find_value, instructions):
                answer = []
                for inst in instructions:
                    if inst[4] in find_value:
                        answer.append(inst)

                return answer
            
            def GetDataForRequest(msg, bot, dbm):
                request = msg.text
                instructions = dbm.GetAllInstructions()
                find = FindInstructions(request, instructions)
                if len(find) == 0:
                    bot.send_message(msg.chat.id, '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ —Ç–∞–∫–æ–º—É –∑–∞–ø—Ä–æ—Å—É')    
                
                else:
                    keyboard = KBM.CreatingListIstructions(find, 'id_instruction')
                    bot.send_message(msg.chat.id, '–ù–∞—à–ª–∏ —Ç–∞–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:', reply_markup=keyboard())

            data_mechanicum = dbm.GetMechanicum(chat_id)
            if URM.CheckingMechanicum(data_mechanicum) and URM.CheckingReaderCapabilities(data_mechanicum):
                msg = bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–±—É—é–µ–º–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.')
                bot.register_next_step_handler(msg, GetDataForRequest, bot, dbm)
            else:
                bot.UserNotHaveRightsMessage(chat_id)

        def GetComment(chat_id, bot, dbm, call):
            def ParseComments(data):
                answer = ''
                if len(data) != 0:
                    for i in data:
                        answer += f'[{i[0]}] {' '.join(dbm.GetNameMechanicum(i[2])[0])} - {i[4]}\n'
                else:
                    answer = 'ü¶ó ...'
                
                return answer

            data_mechanicum = dbm.GetMechanicum(chat_id)
            if URM.CheckingMechanicum(data_mechanicum) and URM.CheckingReaderCapabilities(data_mechanicum):
                comments = dbm.GetComments(call)
                bot.send_message(chat_id, f'–ö–æ–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ–¥ –∏—Å—Ç—Ä—É–∫—Ü–∏–µ–π:\n{ParseComments(comments)}')
                
            else:
                bot.UserNotHaveRightsMessage(chat_id)
        
        def CatalogDisplay(chat_id, bot, dbm): # –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∫–∞–∑ –∫–∞—Ç–∞–ª–æ–≥–∞
            
            def ParsingSection(instructions):
                answer = []
                for i in instructions:
                    if i[3] in answer:
                        continue
                    else:
                        answer.append(i[3])

                return answer
            

            instructions = dbm.GetAllInstructions()
            if len(instructions) != 0:
                data_mechanicum = dbm.GetMechanicum(chat_id)
                if URM.CheckingMechanicum(data_mechanicum) and URM.CheckingReaderCapabilities(data_mechanicum):
                    sections = ParsingSection(instructions)
                    keyboard = KBM.CreatingListSections(sections)
                    bot.send_message(chat_id, '–ù–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', reply_markup=keyboard())
                else:
                    bot.UserNotHaveRightsMessage(chat_id)
            else:
                bot.send_message(chat_id, '–ö–∞—Ç–∞–ª–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã :(')

        def ShowAllInstructionsSections(chat_id, bot, dbm, section):
            data_mechanicum = dbm.GetMechanicum(chat_id)
            if URM.CheckingMechanicum(data_mechanicum) and URM.CheckingReaderCapabilities(data_mechanicum):
                instructions = dbm.GetAllInstructionsSection(section)
                keyboard = KBM.CreatingListIstructions(instructions, 'id_instruction')
            else:
                bot.UserNotHaveRightsMessage(chat_id)

            bot.send_message(chat_id, f'–ù–∞—à–ª–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {section}:', reply_markup=keyboard())

        def SearchCategory(chat_id, bot, dbm):

            def GetCategoryName(msg, bot, dbm):
                instructions = dbm.GetAllInstructionsSection(msg.text)
                if len(instructions) == 0:
                    bot.send_message(msg.chat.id, f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')
                else:
                    keyboard = KBM.CreatingListIstructions(instructions, 'id_instruction')
                    bot.send_message(chat_id, f'–ù–∞—à–ª–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {msg.text}:', reply_markup=keyboard())
            
            data_mechanicum = dbm.GetMechanicum(chat_id)
            if URM.CheckingMechanicum(data_mechanicum) and URM.CheckingReaderCapabilities(data_mechanicum):
                msg = bot.send_message(chat_id, f'–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:')
                bot.register_next_step_handler(msg, GetCategoryName, bot, dbm)
            else:
                bot.UserNotHaveRightsMessage(chat_id)

        def SuggestIdea(chat_id, bot, dbm, self):
            
            def ParseDataForSuggestIdea(text):
                name = ''
                description = ''
                index = 0
                for i in text:
                    if i == '\n':
                        index += 1
                    else:
                        if index == 0:
                            name += i
                        elif index == 1:
                            description += i
                return name, description
            
            def GetDataForSuggestIdea(msg, bot, dbm):
                name, description = ParseDataForSuggestIdea(msg.text)
                if len(name) != 0 and len(description) != 0:
                    date = datetime.now().date()
                    data = (msg.from_user.id,
                            name, description,
                            f'{date.year}-{date.month}-{date.day}',
                            0, 0)
                    dbm.SuggestIdea(data)
                    keyboard = KBM.GetKeyboardForConfirmationIdea(dbm.GetLastIdea()[0][0])
                    bot.send_message(msg.chat.id, '–ò–¥–µ—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–Ω–∞ —Ä–∞—Å–º–æ—Ç—Ä–µ–Ω–∏–∏"')
                    self.SendMessageAllAdmins(f'–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∞ –∑–∞–ø–∏—Å—å —Å –¥–∞–Ω–Ω—ã–º–∏:\n{data}', keyboard)
                else:
                    bot.send_message(msg.chat.id, '–î–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ!')

                
            msg = bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ:\n–ù–∞–∑–≤–∞–Ω–∏–µ –∏–¥–µ–∏\n–û–ø–∏—Å–∞–Ω–∏–µ –∏–¥–µ–∏')
            bot.register_next_step_handler(msg, GetDataForSuggestIdea, bot, dbm)

        def ShowAllIdeas(chat_id, bot, dbm, user_admin):
            ideas = dbm.GetAllIdea(user_admin)
            if len(ideas) != 0:
                ideas.sort(reverse=True, key=lambda idea: idea[6])
                keyboard = KBM.GetAllIdesKeyboard(ideas)
                bot.send_message(chat_id, '–ù–∞—à–ª–∏ –≤–æ—Ç —Ç–∞–∫–∏–µ –∏–¥–µ–∏:', reply_markup=keyboard())
            else:
                bot.send_message(chat_id, '–ò–¥–µ–π –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç—É...')

        def ShowIdea(chat_id, bot, dbm, call, user_admin):
            data_mechanicum = dbm.GetMechanicum(chat_id)
            idea = dbm.GetIdea(call)
            if len(idea) != 0:
                idea = idea[0]
                keyboard = KBM.GetIdeaKeyboard(idea, data_mechanicum[5], user_admin)
                bot.send_message(chat_id, f'–ò–¥–µ—è: {idea[2]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {idea[3]}\n–ì–æ–ª–æ—Å–∞: {idea[6]}\n–°–æ–∑–¥–∞—Ç–µ–ª—å: {' '.join(dbm.GetNameMechanicum(idea[1])[0])}', reply_markup=keyboard())
            else:
                bot.send_message(chat_id, '–í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–∞ –∏–¥–µ—è —É–∂–µ —É–¥–∞–ª–µ–Ω–∞')

        def VoteIdea(chat_id, bot, dbm, call):
            if dbm.CheckUserVote(call, chat_id):
                dbm.VoteIdea(chat_id, call)
                bot.send_message(chat_id, '–í–∞—à –≥–æ–ª–æ—Å –∑–∞–ø–∏—Å–∞–Ω!')
                dbm.AddActivityPointsUser(chat_id, 1)
            else:
                bot.send_message(chat_id, '–í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏!')
        
        def RemoveIdea(chat_id, bot, dbm, call):

            def GetDataForRemoveIdea(msg, bot, dbm, call):
                if msg.text == '–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å':
                    dbm.IdeaReject(call)
                    bot.send_message(msg.chat.id, '–ò–¥–µ—è –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞!')
                else:
                    pass
            
            msg = bot.send_message(chat_id, '–ù–∞–ø–∏—à–∏—Ç–µ "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å" –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:')
            bot.register_next_step_handler(msg, GetDataForRemoveIdea, bot, dbm, call)

        def ToCreateIdea(chat_id, bot, dbm, call):
            idea = dbm.GetIdea(call)
            if len(idea) != 0:
                idea = idea[0]
                if int(idea[5]) == 1:
                    dbm.IdeaAccept(call, 2)
                    bot.send_message(chat_id, '–ò–¥–µ—è –≤–∑—è—Ç–∞ –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É!')
                    if dbm.GetMechanicum(idea[1])[7] and idea[1] != chat_id:
                        bot.send_message(idea[1], f'–í–∞—à–∞ –∏–¥–µ—è "{idea[2]}" –ø—Ä–∏–Ω—è—Ç–∞ –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É!')
                else:
                    bot.send_message(chat_id, '–ò–¥–µ—è –∏–º–µ–µ—Ç –¥—Ä—É–≥–æ–π —Å—Ç–∞—Ç—É—Å')
            else:
                bot.send_message(chat_id, '–í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–∞ –∏–¥–µ—è —É–∂–µ —É–¥–∞–ª–µ–Ω–∞')

        def ReleaseIdea(chat_id, bot, dbm, call):
            idea = dbm.GetIdea(call)
            if len(idea) != 0:
                idea = idea[0]
                if int(idea[5]) == 2:
                    dbm.IdeaAccept(call, 3)
                    bot.send_message(chat_id, '–í—ã –≤—ã–ø—É—Å—Ç–∏–ª–∏ –ø—Ä–æ–¥—É–∫—Ç –∏–¥–µ–∏!')
                    if dbm.GetMechanicum(idea[1])[7] and idea[1] != chat_id:
                        bot.send_message(idea[1], f'–í–∞—à–∞ –∏–¥–µ—è "{idea[2]}" –±—ã–ª–∞ –≤—ã–ø—É—â–µ–Ω–∞!')
                else:
                    bot.send_message(chat_id, '–ò–¥–µ—è –∏–º–µ–µ—Ç –¥—Ä—É–≥–æ–π —Å—Ç–∞—Ç—É—Å')
            else:
                bot.send_message(chat_id, '–í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–∞ –∏–¥–µ—è —É–∂–µ —É–¥–∞–ª–µ–Ω–∞')




    class EditingModeActions(BasicActions):

        def ParseData(data):
            section = ''
            name = ''
            description = ''
            url = ''
            index = 0
            try:
                for i in data:
                    if i == '\n':
                        index += 1
                        continue
                    elif index == 0:
                        section += i
                    elif index == 1:
                        name += i
                    elif index == 2:
                        description += i
                    elif index == 3:
                        url += i

            except Exception:
                return False, False, False, False
            else:
                return section, name.lower(), description, url
            
        def CreatingInstructions(chat_id, bot, dbm): # —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏

            def GetDataForAddInstructions(msg, bot, dbm):
                date = datetime.now().date()
                section, name, description, url = Actions.EditingModeActions.ParseData(msg.caption)
                if section:
                    photo = msg.photo[-1]
                    file_info = bot.get_file(photo.file_id)
                    downloaded_file = bot.download_file(file_info.file_path)
                    save_path = f'{photo.file_id}.png'
                    with open(f'Content/photos/{save_path}', 'wb') as new_file:
                        new_file.write(downloaded_file)

                    data = (msg.from_user.id,
                            f'{date.year}-{date.month}-{date.day}',
                            section,
                            name,
                            description,
                            url,
                            save_path)
                        
                    dbm.AddInstruction(data)
                    bot.send_message(msg.chat.id, f'–î–æ–±–∞–≤–ª–µ–Ω–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏:\n{data}')
                    dbm.AddActivityPointsUser(msg.from_user.id, 3)
                else:
                    bot.send_message(msg.chat.id, f'–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –Ω–µ –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∏–∑-–∑–∞ –Ω–µ–≤–µ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö')

            
            data_mechanicum = dbm.GetMechanicum(chat_id)
            if URM.CheckingMechanicum(data_mechanicum) and URM.CheckingEditorCapabilities(data_mechanicum):
                msg = bot.send_message(chat_id, '–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–æ–∞–∑–æ–º (—Ü–∏—Ñ—Ä–∞ –æ–∑–Ω–∞—á–∞–µ—Ç –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏):\n[1] –ò–º—è —Ä–∞–∑–¥–µ–ª–∞\n[2] –ù–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏\n[3] –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞\n[4] –°—Å—ã–ª–∫–∞ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç\n–¢–∞–∫–∂–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –∫ –∑–∞–ø–∏—Å–µ.')
                bot.register_next_step_handler(msg, GetDataForAddInstructions, bot, dbm)
            else:
                bot.UserNotHaveRightsMessage(chat_id)

        
        def GetIDEditInstructions(message, bot, dbm):
            data_mechanicum = dbm.GetMechanicum(message.chat.id)
            data_admin = dbm.GetAdmin(message.chat.id)

            if URM.CheckingMechanicum(data_mechanicum) and URM.CheckingEditorCapabilities(data_mechanicum):
                if URM.CheckingAdminCapabilities(data_mechanicum) and URM.CheckingActivityAdministration(data_admin):
                    instructions = dbm.GetAllInstructions()
                else:
                    instructions = dbm.GetInstructionsUser(message.from_user.id)
                
                if len(instructions) != 0:
                    keyboard = KBM.CreatingListIstructions(instructions, 'edit_id')
                    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', reply_markup=keyboard())
                else:
                    pass
            else:
                bot.UserNotHaveRightsMessage(message.chat.id)
            

        def EditInstructions(chat_id, bot, dbm, id_instruction):
            
            def GetDataForEditInstructions(msg, bot, dbm, id_instruction):
                section, name, description, url = Actions.EditingModeActions.ParseData(msg.caption)
                if section:
                    photo = msg.photo[-1]
                    file_info = bot.get_file(photo.file_id)
                    downloaded_file = bot.download_file(file_info.file_path)
                    save_path = f'{photo.file_id}.png'
                    with open(f'Content/photos/{save_path}', 'wb') as new_file:
                        new_file.write(downloaded_file)

                    data_instruction = dbm.GetInstruction(id_instruction)

                    os.remove(f'Content/photos/{data_instruction[7]}')
                    
                    data = (msg.from_user.id,
                            section,
                            name,
                            description,
                            url,
                            save_path)
                            
                    
                    dbm.EditInstruction(id_instruction, data)
                    bot.send_message(msg.chat.id, f'–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞ —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏:\n{data}')
                    dbm.AddActivityPointsUser(msg.from_user.id, 2)
                else:
                    bot.send_message(msg.chat.id, f'–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –Ω–µ –±—ã–ª–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑-–∑–∞ –Ω–µ–≤–µ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö')
            
            data_mechanicum = dbm.GetMechanicum(chat_id)
            if URM.CheckingMechanicum(data_mechanicum) and URM.CheckingEditorCapabilities(data_mechanicum):
                msg = bot.send_message(chat_id, '–î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–æ–∞–∑–æ–º (—Ü–∏—Ñ—Ä–∞ –æ–∑–Ω–∞—á–∞–µ—Ç –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏):\n[1] –ò–º—è —Ä–∞–∑–¥–µ–ª–∞\n[2] –ù–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏\n[3] –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞\n[4] –°—Å—ã–ª–∫–∞ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç\n–¢–∞–∫–∂–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –∫ –∑–∞–ø–∏—Å–µ.')
                bot.register_next_step_handler(msg, GetDataForEditInstructions, bot, dbm, id_instruction)
            else:
                bot.UserNotHaveRightsMessage(chat_id)

        def RemoveInstructions(chat_id,  bot, dbm):
            
            def GetDataForRemoveInstructions(msg, bot, dbm):
                id = int(msg.text)
                try:
                    dbm.RemoveInstruction(id)
                except Exception:
                    bot.send_message(msg.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è')
                else:
                    bot.send_message(msg.chat.id, '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞')
            
            def ParseInstructions(data):
                answer = 'id  |  section  |  name\n'
                for i in data:
                    answer += f'[{i[0]}]  |  {i[3]}  |  {i[4]}\n'
                return answer

            instructions = ParseInstructions(dbm.GetAllInstructions())

            msg = bot.send_message(chat_id, f'–í–≤–µ–¥–∏—Ç–µ id –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n{instructions}')
            bot.register_next_step_handler(msg, GetDataForRemoveInstructions, bot, dbm)

    class AdministrationModeAtions(EditingModeActions):

        def ParsePrefixAndCapForAdd(data):
            value = ''
            price = ''

            index = 0
            for i in data:
                if i == '\n':
                    index += 1
                    continue
                elif index == 0:
                    value += i
                elif index == 1:
                    price += i
                
            
            return value, price
        
        def ParsePrefixAndCapForRemove(data):
            answer = 'id  |  value  |  price\n'
            for i in data:
                answer += f'[{i[0]}]    {i[1]}    {i[2]}\n'
            return answer
        
        def ParseMechanicum(data):
            answer = 'id  |  id_telegram  |  real_name  |  rank  | reader | editor | admin\n'
            for i in data:
                answer += f'[{i[0]}]  |  {i[1]}  |  {i[2]}  |  {i[3]}  | {i[4]} | {i[5]} | {i[6]}\n'
            return answer

        def IdeaAccept(admin_id, bot, dbm, call):
            idea = dbm.GetIdea(call)
            if len(idea) != 0:
                idea = idea[0]
                if int(idea[5]) == 0:
                    dbm.IdeaAccept(call, 1)
                    dbm.AddActivityPointsUser(admin_id, 1)
                    data_mechanicum = dbm.GetMechanicum(idea[1])
                    if data_mechanicum[7] and idea[1] != admin_id:
                        bot.send_message(idea[1], f'–ò–¥–µ—è {idea[2]} –±—ã–ª–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞!')
                    
                    bot.send_message(admin_id, f'–í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–∏–ª–∏ –∏–¥–µ—é')
                else:
                    bot.send_message(admin_id, f'–ò–¥–µ—è —É–∂–µ –ø—Ä–∏–Ω—è—Ç–∞')
            else:
                bot.send_message(admin_id, f'–í–æ–∑–º–æ–∂–Ω–æ, –∏–¥–µ—è –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞')

        def IdeaReject(admin_id, bot, dbm, call):
            idea = dbm.GetIdea(call)
            if len(idea) != 0:
                idea = idea[0]
                if int(idea[5]) == 1:
                    bot.send_message(admin_id, f'–ò–¥–µ—è —É–∂–µ –ø—Ä–∏–Ω—è—Ç–∞. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å.')
                else:
                    dbm.IdeaReject(call)
                    dbm.AddActivityPointsUser(admin_id, 1)
                    data_mechanicum = dbm.GetMechanicum(idea[1])
                    if data_mechanicum[7]:
                        bot.send_message(idea[1], f'–ò–¥–µ—è {idea[2]} –±—ã–ª–∞ –æ—Ç–≤–µ—Ä–≥–Ω—É—Ç–∞!')
                    
                    bot.send_message(admin_id, f'–ò–¥–µ—è –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞')
            else:
                bot.send_message(admin_id, f'–í–æ–∑–º–æ–∂–Ω–æ, –∏–¥–µ—è –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞')
        
        
        def AddItem(message, bot, dbm, text):
            
            def GetDataForAddItem(msg, bot, dbm):
                item, price = Actions.AdministrationModeAtions.ParsePrefixAndCapForAdd(msg.text)
                try:
                    int(price)
                except Exception:
                    bot.send_message(msg.chat.id, f'–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!')
                else:
                    if (len(item) == 1 and text == 'cap') or text == 'prefix':
                        data = (item, price)
                        dbm.AddItem(text, data)
                        if text == 'prefix':
                            bot.send_message(msg.chat.id, f'–ü—Ä–µ—Ñ–∏–∫—Å –¥–æ–±–∞–≤–ª–µ–Ω —Å –¥–∞–Ω–Ω—ã–º–∏: {data}')
                        elif text == 'cap':
                            bot.send_message(msg.chat.id, f'–®–∞–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å –¥–∞–Ω–Ω—ã–º–∏: {data}')
                        dbm.AddActivityPointsUser(msg.chat.id, 1)
                    else:
                        bot.send_message(msg.chat.id, f'–®–∞–ø–∫–∞ - —ç—Ç–æ –æ–¥–∏–Ω —Å–º–∞–π–ª–∏–∫!')
                
                dbm.UpdatingAdministratorActivity(msg.from_user.id)

            
            if text == 'prefix':
                msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ—Ñ–∏–∫—Å –∏ —Ü–µ–Ω—É –ø–æ—Å—Ç—Ä–æ—á–Ω–æ:')
            elif text == 'cap':
                msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —à–∞–ø–∫—É –∏ —Ü–µ–Ω—É –ø–æ—Å—Ç—Ä–æ—á–Ω–æ:')

            bot.register_next_step_handler(msg, GetDataForAddItem, bot, dbm)

        def RemoveItem(message, bot, dbm, text):

            def GetDataForRemoveItem(msg, bot, dbm, items):
                id_item = msg.text
                try:
                    dbm.RemoveItem(text, id_item)
                except Exception:
                    bot.send_message(msg.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è')
                else:
                    bot.send_message(msg.chat.id, '–ü—Ä–µ–¥–º–µ—Ç –±—ã–ª —É–¥–∞–ª—ë–Ω!')
                    dbm.AddActivityPointsUser(msg.from_user.id, 1)

                dbm.UpdatingAdministratorActivity(msg.from_user.id)
            
            values = dbm.GetAllItems(text)
            if text == 'prefix':
                msg = bot.send_message(message.chat.id, f'–í–≤–µ–¥–∏—Ç–µ id –ø—Ä–µ—Ñ–∏–∫—Å–∞, –∫–æ—Ç–æ—Ä—ã–π —Ç—Ä–µ–±—É–µ—Ç—Å—è —É–¥–∞–ª–∏—Ç—å:\n{Actions.AdministrationModeAtions.ParsePrefixAndCapForRemove(values)}')
            elif text == 'cap':
                msg = bot.send_message(message.chat.id, f'–í–≤–µ–¥–∏—Ç–µ id —à–∞–ø–∫–∏, –∫–æ—Ç–æ—Ä—ã–π —Ç—Ä–µ–±—É–µ—Ç—Å—è —É–¥–∞–ª–∏—Ç—å:\n{Actions.AdministrationModeAtions.ParsePrefixAndCapForRemove(values)}')
            bot.register_next_step_handler(msg, GetDataForRemoveItem, bot, dbm, values)

        
        def AddMechanicum(chat_id, bot, dbm): # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ö–∞–Ω–∏–∫—É–º–∞
            
            def ParseName(value):
                answer = ''
                for i in value:
                    if i == '_':
                        answer += ' '
                    else:
                        answer += i

                return answer
            
            def GetDataForAddMechanicum(msg, bot, dbm):
                data = msg.text.split()
                try:
                    data[1] = ParseName(data[1])
                    dbm.AddMechanicum(data)
                    if int(data[5]) == 1:
                        a = dbm.GetLastMechanicum(data[0])[0]
                        dbm.AddAdmin([a[1], a[0]])
                except Exception as e:
                    bot.send_message(msg.chat.id, '–ú–µ—Ö–∞–Ω–∏–∫—É–º –Ω–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –∏–∑-–∑–∞ –Ω–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.')
                else:
                    bot.send_message(msg.chat.id, f'–ú–µ—Ö–∞–Ω–∏–∫—É–º –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏:\n{data}')
                    dbm.AddActivityPointsUser(msg.from_user.id, 2)
                    

                dbm.UpdatingAdministratorActivity(msg.from_user.id)
            
            msg = bot.send_message(chat_id, '–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–≤–æ–≥–æ –º–µ—Ö–∞–Ω–∏–∫—É–º–∞ –≤–≤–µ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –¥–∞–Ω–Ω—ã–µ:\n \
id_telegram INTEGER (id —Ç–≥-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)\n \
real_name TEXT (–∫–∞–∫ –∑–æ–≤—É—Ç –º–µ—Ö–∞–Ω–∏–∫—É–º–∞, —Ñ–∞–º–∏–ª–∏—è –∏ –∏–º—è —Ä–∞–∑–¥–µ–ª—è–µ—Ç—Å—è "_")\n\
rank TEXT, (—Ä–∞–Ω–≥ –º–µ—Ö–∞–Ω–∏–∫—É–º–∞)\n\
reader BOOLEAN, (–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —á—Ç–µ–Ω–∏—è)\n\
editor BOOLEAN, (–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)\n\
admin BOOLEAN (–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è)')
            
            bot.register_next_step_handler(msg, GetDataForAddMechanicum, bot, dbm)

        
        def EditMechanicum(chat_id, bot, dbm):
            
            def ParseText(text):
                data = ''
                id_m = ''
                index = 0
                for i in text:
                    if i == '\n':
                        index += 1
                        continue
                    elif index == 0:
                        data += i
                    elif index == 1:
                        id_m += i
                return data, id_m

            def GetDataForEditMechanicum(msg, bot, dbm):
                data, id_m = ParseText(msg.text)
                try:
                    dbm.EditMechanicum(data, id_m)
                except Exception as e:
                    bot.send_message(msg.chat.id, '–ú–µ—Ö–∞–Ω–∏–∫—É–º –Ω–µ –±—ã–ª –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω. –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!')
                else:
                    bot.send_message(msg.chat.id, '–ú–µ—Ö–∞–Ω–∏–∫—É–º –±—ã–ª –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω')
                    dbm.AddActivityPointsUser(msg.from_user.id, 1)

                dbm.UpdatingAdministratorActivity(msg.from_user.id)

            text = Actions.AdministrationModeAtions.ParseMechanicum(dbm.GetAllMechanicum())
            
            bot.send_message(chat_id, '**–í–Ω–∏–º–∞–Ω–∏–µ!** –î–ª—è –∏—Å–ø–æ–ª—å–∑–≤–∞–æ–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Ç—Ä–µ–±—É–µ—Ç—Å—è –∑–Ω–∞—Ç—å –Ω–µ–º–Ω–æ–≥–æ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ SQL! –ù–∞ —Ç–æ –æ–Ω –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä...', parse_mode='Markdown')
            bot.send_message(chat_id, '–ù–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –ø–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤ –∏ —á–µ–º—É –æ–Ω–∏ —Ä–∞–≤–Ω—ã, –Ω–∞ –≤—Ç–æ—Ä–æ–π –∂–µ –Ω–∞–ø–∏—à–∏—Ç–µ id –º–µ—Ö–∞–Ω–∏–∫—É–º–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å. –ü—Ä–∏–º–µ—Ä —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏:\n```SQL\nreal_name = "test_name", admin = 0\n2```', parse_mode='Markdown')
            msg = bot.send_message(chat_id, f'–í—Å–µ –º–µ—Ö–∞–Ω–∏–∫—É–º—ã:\n{text}')
            bot.register_next_step_handler(msg, GetDataForEditMechanicum, bot, dbm)

        def RemoveMechanicum(chat_id, bot, dbm):
            
            def GetDataForRemoveMechanicum(msg, bot, dbm):
                id_m = msg.text
                try:
                    dbm.RemoveMechanicum(id_m)
                except Exception:
                    bot.send_message(msg.chat.id, '–ú–µ—Ö–∞–Ω–∏–∫—É–º –Ω–µ –±—ã–ª —É–¥–∞–ª—ë–Ω. –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!')
                else:
                    bot.send_message(msg.chat.id, '–ú–µ—Ö–∞–Ω–∏–∫—É–º —É–¥–∞–ª—ë–Ω')
                    dbm.AddActivityPointsUser(msg.from_user.id, 1)

                dbm.UpdatingAdministratorActivity(msg.from_user.id)
                
            
            text = Actions.AdministrationModeAtions.ParseMechanicum(dbm.GetAllMechanicum())

            msg = bot.send_message(chat_id, f'–í–≤–µ–¥–∏—Ç–µ id –º–µ—Ö–∞–Ω–∏–∫—É–º–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å:\n{text}')
            bot.register_next_step_handler(msg, GetDataForRemoveMechanicum, bot, dbm)

        def AdminSending(chat_id, bot, dbm, self):
            
            def GetDataForAdminSending(msg, bot, dbm, self):
                self.SendMessageAllMechanicum(msg.text, msg.from_user.id)
            
            msg = bot.send_message(chat_id, f'–ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –º–µ—Ö–∞–Ω–∏–∫—É–º–∞–º:')
            bot.register_next_step_handler(msg, GetDataForAdminSending, bot, dbm, self)